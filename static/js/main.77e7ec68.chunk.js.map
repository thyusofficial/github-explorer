{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["module","exports","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Repositories","div","Error","span","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","repository","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","exact","path","component","Repository","createGlobalStyle","githubBackground","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77e7ec68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.0b819d63.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n\n  max-width: 450px;\n\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n\n  input,\n  button {\n    height: 70px;\n  }\n\n  input {\n    flex: 1;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border: 2px solid #c53030;\n        border-right: 0;\n      `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    background: #04d361;\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n","import React, { useState, FormEvent, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite autor/nome do reposit贸rio.');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`/repos/${newRepo}`);\n\n      setRepositories([...repositories, response.data]);\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca do reposit贸rio.');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github explorer logo\" />\n      <Title>Explore reposit贸rios no Github.</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\nimport logoImg from '../../assets/logo.svg';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`/repos/${params.repository}`).then(response => {\n      setRepository(response.data);\n    });\n    api.get(`/repos/${params.repository}/issues`).then(response => {\n      setIssues(response.data);\n    });\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  *{\n    margin:0;\n    padding:0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body{\n    background: #f0f0f5 url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button{\n    font: 16px Roboto, sans-serif;\n  }\n\n  button{\n    cursor: pointer;\n  }\n\n  #root{\n    max-width: 960px;\n    margin:0 auto;\n    padding: 40px 20px;\n  }\n`;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes';\nimport GlobalStyle from './styles/global';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}